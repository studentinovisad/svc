services:
  # Reverse proxy
  crowdsec:
    image: docker.io/crowdsecurity/crowdsec:v1.6.11
    environment:
      COLLECTIONS: "crowdsecurity/traefik crowdsecurity/appsec-virtual-patching crowdsecurity/appsec-generic-rules"
      CUSTOM_HOSTNAME: "crowdsec"
      BOUNCER_KEY_TRAEFIK: ${BOUNCER_KEY_TRAEFIK}
    volumes:
      - type: volume
        source: traefik-logs-vol
        target: /var/log/traefik
        volume:
          nocopy: false
      - type: volume
        source: crowdsec-db-vol
        target: /var/lib/crowdsec/data
        volume:
          nocopy: false
      - type: volume
        source: crowdsec-conf-vol
        target: /etc/crowdsec
        volume:
          nocopy: false
      - type: bind
        source: ./acquis.yaml
        target: /etc/crowdsec/acquis.yaml
        read_only: true
    networks:
      - internal
    restart: unless-stopped

  traefik:
    depends_on:
      - crowdsec
    image: docker.io/library/traefik:v3.5.3
    command:
      - "--accesslog"
      - "--accesslog.filepath=/var/log/traefik/access.log"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http3"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=acme/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--experimental.plugins.bouncer.modulename=github.com/maxlerebourg/crowdsec-bouncer-traefik-plugin"
      - "--experimental.plugins.bouncer.version=v1.4.5"
    ports:
      - "80:80/tcp"
      - "443:443/tcp"
      - "443:443/udp"
    volumes:
      - type: volume
        source: traefik-logs-vol
        target: /var/log/traefik
        volume:
          nocopy: false
      - type: volume
        source: traefik-acme-vol
        target: /acme
        volume:
          nocopy: false
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    networks:
      - internal
    restart: unless-stopped

  # VPN
  wg-easy:
    image: ghcr.io/wg-easy/wg-easy:15.1.0
    environment:
      WG_DEVICE: lo # Set to eth0 to allow internet, otherwise lo is loopback
      INIT_ENABLED: true
      INIT_USERNAME: ${VPN_GUI_USERNAME:-admin}
      INIT_PASSWORD: ${VPN_GUI_PASSWORD:-admin}
      INIT_HOST: ${VPN_DOMAIN:-}
      INIT_PORT: 51820
      INIT_DNS: ${VPN_DNS:-9.9.9.9,149.112.112.112} # Sadly cannot be disabled
      INIT_IPV4_CIDR: 10.13.12.0/24
      INIT_IPV6_CIDR: fd00:1312::/64
    volumes:
      - type: volume
        source: wg-conf-vol
        target: /etc/wireguard
        volume:
          nocopy: false
      - type: bind
        source: /lib/modules
        target: /lib/modules
        read_only: true
    ports:
      - "51820:51820/udp"
    networks:
      internal:
        driver_opts:
          com.docker.network.endpoint.ifname: eth0
      # Custom IP addresses required for correct IPv6 setup
      # wireguard:
      #   driver_opts:
      #     com.docker.network.endpoint.ifname: eth0
      #   ipv4_address: 10.42.42.42
      #   ipv6_address: fdcc:ad94:bacf:61a3::2a
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
      # Uncomment to enable IPv6
      # - net.ipv6.conf.all.disable_ipv6=0
      # - net.ipv6.conf.all.forwarding=1
      # - net.ipv6.conf.default.forwarding=1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.wg-easy.rule=Host(`${VPN_DOMAIN}`)"
      - "traefik.http.routers.wg-easy.middlewares=crowdsec@docker"
      - "traefik.http.routers.wg-easy.entrypoints=websecure"
      - "traefik.http.routers.wg-easy.tls=true"
      - "traefik.http.routers.wg-easy.tls.certresolver=letsencrypt"
      - "traefik.http.services.wg-easy.loadbalancer.server.port=51821"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.enabled=true"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecmode=stream"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdseclapikey=${BOUNCER_KEY_TRAEFIK}"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecappsecenabled=true"
    restart: unless-stopped

  # Password manager
  vaultwarden-postgres:
    image: docker.io/library/postgres:16.9
    environment:
      POSTGRES_DB: ${VAULTWARDEN_DATABASE_DB:-vw}
      POSTGRES_USER: ${VAULTWARDEN_DATABASE_USER:-vw}
      POSTGRES_PASSWORD: ${VAULTWARDEN_DATABASE_PASSWORD}
    volumes:
      - type: volume
        source: vaultwarden-postgres-vol
        target: /var/lib/postgresql/data
        volume:
          nocopy: false
    networks:
      - internal
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${VAULTWARDEN_DATABASE_USER:-vw} -d ${VAULTWARDEN_DATABASE_DB:-vw}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  vaultwarden-pgdumper:
    image: docker.io/martlark/pg_dump:16.1
    environment:
      CRON_SCHEDULE: "1 * * * *"
      RETAIN_COUNT: 1
      PGHOST: "vaultwarden-postgres"
      POSTGRES_DB: ${VAULTWARDEN_DATABASE_DB:-vw}
      PGUSER: ${VAULTWARDEN_DATABASE_USER:-vw}
      POSTGRES_PASSWORD: ${VAULTWARDEN_DATABASE_PASSWORD}
    volumes:
      - type: bind
        source: /var/stor/vaultwarden/pgdump
        target: /dump
    networks:
      - internal
    restart: unless-stopped
    depends_on:
      vaultwarden-postgres:
        condition: service_healthy
        restart: true

  vaultwarden-restic:
    image: ghcr.io/lobaro/restic-backup-docker:v1.4.2
    environment:
      BACKUP_CRON: "52 * * * *" # Every hour at 52nd minute
      RESTIC_FORGET_ARGS: "--prune --keep-last 3 --keep-hourly 12 --keep-daily 7 --keep-weekly 4 --keep-monthly 3"
      RESTIC_PASSWORD: "${VAULTWARDEN_RESTIC_ENCRYPTION_KEY}"
      RESTIC_REPOSITORY: "s3:https://${VAULTWARDEN_RESTIC_S3_ENDPOINT}/${VAULTWARDEN_RESTIC_S3_BUCKET}"
      AWS_ACCESS_KEY_ID: "${VAULTWARDEN_RESTIC_S3_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${VAULTWARDEN_RESTIC_S3_SECRET_ACCESS_KEY}"
    volumes:
      - type: bind
        source: /var/stor/vaultwarden
        target: /data/backup
        read_only: true
    networks:
      - internal
    restart: unless-stopped

  vaultwarden:
    image: docker.io/vaultwarden/server:1.34.3
    environment:
      DATABASE_URL: "postgresql://${VAULTWARDEN_DATABASE_USER:-vw}:${VAULTWARDEN_DATABASE_PASSWORD}@vaultwarden-postgres:5432/${VAULTWARDEN_DATABASE_DB:-vw}"
      DOMAIN: "https://${VAULTWARDEN_DOMAIN}"
      SIGNUPS_ALLOWED: false
      SIGNUPS_VERIFY: true
      INVITATIONS_ALLOWED: true
      ORG_CREATION_USERS: ${VAULTWARDEN_ORG_CREATION_USERS:-none}
      PASSWORD_HINTS_ALLOWED: false
      ADMIN_TOKEN: ${VAULTWARDEN_ADMIN_TOKEN}
      SMTP_HOST: ${VAULTWARDEN_SMTP_HOST:-}
      SMTP_FROM: ${VAULTWARDEN_SMTP_FROM:-}
      SMTP_FROM_NAME: ${VAULTWARDEN_FROM_NAME:-}
      SMTP_USERNAME: ${VAULTWARDEN_SMTP_USERNAME:-}
      SMTP_PASSWORD: ${VAULTWARDEN_STMP_PASSWORD:-}
    volumes:
      - type: bind
        source: /var/stor/vaultwarden/data
        target: /data
    networks:
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vaultwarden.rule=Host(`${VAULTWARDEN_DOMAIN}`)"
      - "traefik.http.routers.vaultwarden.middlewares=crowdsec@docker"
      - "traefik.http.routers.vaultwarden.entrypoints=websecure"
      - "traefik.http.routers.vaultwarden.tls=true"
      - "traefik.http.routers.vaultwarden.tls.certresolver=letsencrypt"
      - "traefik.http.services.vaultwarden.loadbalancer.server.port=80"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.enabled=true"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecmode=stream"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdseclapikey=${BOUNCER_KEY_TRAEFIK}"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecappsecenabled=true"
    restart: unless-stopped
    depends_on:
      vaultwarden-postgres:
        condition: service_healthy
        restart: true

  # Drive
  sftpgo-postgres:
    image: docker.io/library/postgres:16.9
    environment:
      POSTGRES_DB: ${SFTPGO_DATABASE_DB:-sgo}
      POSTGRES_USER: ${SFTPGO_DATABASE_USER:-sgo}
      POSTGRES_PASSWORD: ${SFTPGO_DATABASE_PASSWORD}
    volumes:
      - type: volume
        source: sftpgo-postgres-vol
        target: /var/lib/postgresql/data
        volume:
          nocopy: false
    networks:
      - internal
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${SFTPGO_DATABASE_USER:-sgo} -d ${SFTPGO_DATABASE_DB:-sgo}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  sftpgo-pgdumper:
    image: docker.io/martlark/pg_dump:16.1
    environment:
      CRON_SCHEDULE: "1 * * * *"
      RETAIN_COUNT: 1
      PGHOST: "sftpgo-postgres"
      POSTGRES_DB: ${SFTPGO_DATABASE_DB:-sgo}
      PGUSER: ${SFTPGO_DATABASE_USER:-sgo}
      POSTGRES_PASSWORD: ${SFTPGO_DATABASE_PASSWORD}
    volumes:
      - type: bind
        source: /var/stor/sftpgo/pgdump
        target: /dump
    networks:
      - internal
    restart: unless-stopped
    depends_on:
      sftpgo-postgres:
        condition: service_healthy
        restart: true

  sftpgo-restic:
    image: ghcr.io/lobaro/restic-backup-docker:v1.4.2
    environment:
      BACKUP_CRON: "52 4 * * *" # Every day at 04:52
      RESTIC_FORGET_ARGS: "--prune --keep-last 3 --keep-daily 7 --keep-weekly 4 --keep-monthly 3"
      RESTIC_PASSWORD: "${SFTPGO_RESTIC_ENCRYPTION_KEY}"
      RESTIC_REPOSITORY: "s3:https://${SFTPGO_RESTIC_S3_ENDPOINT}/${SFTPGO_RESTIC_S3_BUCKET}"
      AWS_ACCESS_KEY_ID: "${SFTPGO_RESTIC_S3_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${SFTPGO_RESTIC_S3_SECRET_ACCESS_KEY}"
    volumes:
      - type: bind
        source: /var/stor/sftpgo
        target: /data/backup
        read_only: true
    networks:
      - internal
    restart: unless-stopped

  sftpgo:
    image: ghcr.io/drakkan/sftpgo:v2.6.6-distroless-slim
    environment:
      SFTPGO_DEFAULT_ADMIN_USERNAME: ${SFTPGO_ADMIN_USERNAME:-admin}
      SFTPGO_DEFAULT_ADMIN_PASSWORD: ${SFTPGO_ADMIN_PASSWORD}
      SFTPGO_DATA_PROVIDER__CREATE_DEFAULT_ADMIN: true
      SFTPGO_DATA_PROVIDER__DRIVER: "postgresql"
      SFTPGO_DATA_PROVIDER__NAME: ${SFTPGO_DATABASE_DB:-sgo}
      SFTPGO_DATA_PROVIDER__HOST: "sftpgo-postgres"
      SFTPGO_DATA_PROVIDER__PORT: 5432
      SFTPGO_DATA_PROVIDER__USERNAME: ${SFTPGO_DATABASE_USER:-sgo}
      SFTPGO_DATA_PROVIDER__PASSWORD: ${SFTPGO_DATABASE_PASSWORD}
      SFTPGO_HTTPD__BINDINGS__0__OIDC__CLIENT_ID: "sftpgo"
      SFTPGO_HTTPD__BINDINGS__0__OIDC__CLIENT_SECRET: ${SFTPGO_OIDC_SECRET}
      SFTPGO_HTTPD__BINDINGS__0__OIDC__CONFIG_URL: "https://${AUTHELIA_DOMAIN}"
      SFTPGO_HTTPD__BINDINGS__0__OIDC__REDIRECT_BASE_URL: "https://${SFTPGO_DOMAIN}"
      SFTPGO_HTTPD__BINDINGS__0__OIDC__SCOPES: "openid,profile,email,sftpgo"
      SFTPGO_HTTPD__BINDINGS__0__OIDC__USERNAME_FIELD: "preferred_username"
      SFTPGO_HTTPD__BINDINGS__0__OIDC__ROLE_FIELD: "sftpgo_role"
      SFTPGO_SMTP__HOST: ${SFTPGO_SMTP_HOST:-}
      SFTPGO_SMTP__PORT: ${SFTPGO_SMTP_PORT:-587}
      SFTPGO_SMTP__FROM: ${SFTPGO_SMTP_FROM:-}
      SFTPGO_SMTP__USER: ${SFTPGO_SMTP_USERNAME:-}
      SFTPGO_SMTP__PASSWORD: ${SFTPGO_SMTP_PASSWORD:-}
      SFTPGO_SMTP__ENCRYPTION: ${SFTPGO_SMTP_ENCRYPTION:-2}
    volumes:
      - type: bind
        source: /var/stor/sftpgo/internal
        target: /srv/sftpgo
      - type: bind
        source: /var/stor/sftpgo/storage
        target: /var/lib/sftpgo
    ports:
      - "2022:2022/tcp"
    networks:
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sftpgo.rule=Host(`${SFTPGO_DOMAIN}`)"
      - "traefik.http.routers.sftpgo.middlewares=crowdsec@docker"
      - "traefik.http.routers.sftpgo.entrypoints=websecure"
      - "traefik.http.routers.sftpgo.tls=true"
      - "traefik.http.routers.sftpgo.tls.certresolver=letsencrypt"
      - "traefik.http.services.sftpgo.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.enabled=true"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecmode=stream"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdseclapikey=${BOUNCER_KEY_TRAEFIK}"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecappsecenabled=true"
    restart: unless-stopped
    depends_on:
      sftpgo-postgres:
        condition: service_healthy
        restart: true

  # Jitsi Meet
  jitsi-web:
    depends_on:
      - jitsi-jvb
    image: docker.io/jitsi/web:stable-10431
    environment:
      TZ: ${TZ:-UTC}
      PUBLIC_URL: "https://${JITSI_DOMAIN}"
      ENABLE_AUTH: ${JITSI_ENABLE_AUTH:-1}
      ENABLE_GUESTS: ${JITSI_ENABLE_GUESTS:-1}
    volumes:
      - type: volume
        source: jitsi-web-conf-vol
        target: /config
        volume:
          nocopy: false
      - type: volume
        source: jitsi-web-crontab-vol
        target: /var/spool/cron/crontabs
        volume:
          nocopy: false
      - type: volume
        source: jitsi-web-transcripts-vol
        target: /usr/share/jitsi-meet/transcripts
        volume:
          nocopy: false
      - type: volume
        source: jitsi-web-load-vol
        target: /usr/share/jitsi-meet/load-test
        volume:
          nocopy: false
    networks:
      internal:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jitsi.rule=Host(`${JITSI_DOMAIN}`)"
      - "traefik.http.routers.jitsi.middlewares=crowdsec@docker,authelia@docker"
      - "traefik.http.routers.jitsi.entrypoints=websecure"
      - "traefik.http.routers.jitsi.tls=true"
      - "traefik.http.routers.jitsi.tls.certresolver=letsencrypt"
      - "traefik.http.services.jitsi.loadbalancer.server.port=80"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.enabled=true"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecmode=stream"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdseclapikey=${BOUNCER_KEY_TRAEFIK}"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecappsecenabled=true"
      - "traefik.http.middlewares.authelia.forwardAuth.address=https://auth.blokada.info/api/authz/forward-auth"
      - "traefik.http.middlewares.authelia.forwardAuth.trustForwardHeader=true"
      - "traefik.http.middlewares.authelia.forwardAuth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Email,Remote-Name"
    restart: unless-stopped

  jitsi-prosody:
    image: docker.io/jitsi/prosody:stable-10431
    environment:
      TZ: ${TZ:-UTC}
      PUBLIC_URL: "https://${JITSI_DOMAIN}"
      AUTH_TYPE: ${JITSI_AUTH_TYPE:-internal}
      ENABLE_AUTH: ${JITSI_ENABLE_AUTH:-1}
      ENABLE_GUESTS: ${JITSI_ENABLE_GUESTS:-1}
      JICOFO_AUTH_PASSWORD: ${JICOFO_AUTH_PASSWORD}
      JVB_AUTH_PASSWORD: ${JVB_AUTH_PASSWORD}
    volumes:
      - type: volume
        source: jitsi-prosody-conf-vol
        target: /config
        volume:
          nocopy: false
      - type: volume
        source: jitsi-prosody-plugins-vol
        target: /prosody-plugins-custom
        volume:
          nocopy: false
    expose:
      - "5222"
      - "5269"
      - "5347"
      - "5280"
    networks:
      internal:
        aliases:
          - xmpp.meet.jitsi
    restart: unless-stopped

  jitsi-jicofo:
    depends_on:
      - jitsi-prosody
    image: docker.io/jitsi/jicofo:stable-10431
    environment:
      TZ: ${TZ:-UTC}
      PUBLIC_URL: "https://${JITSI_DOMAIN}"
      AUTH_TYPE: ${JITSI_AUTH_TYPE:-internal}
      ENABLE_AUTH: ${JITSI_ENABLE_AUTH:-1}
      JICOFO_AUTH_PASSWORD: ${JICOFO_AUTH_PASSWORD}
    volumes:
      - type: volume
        source: jitsi-jicofo-conf-vol
        target: /config
        volume:
          nocopy: false
    networks:
      internal:
    restart: unless-stopped

  jitsi-jvb:
    depends_on:
      - jitsi-prosody
    image: docker.io/jitsi/jvb:stable-10431
    environment:
      TZ: ${TZ:-UTC}
      PUBLIC_URL: "https://${JITSI_DOMAIN}"
      JVB_AUTH_PASSWORD: ${JVB_AUTH_PASSWORD}
    volumes:
      - type: volume
        source: jitsi-jvb-conf-vol
        target: /config
        volume:
          nocopy: false
    ports:
      - "10000:10000/udp"
    networks:
      internal:
    restart: unless-stopped

  # MinIO - currently unused
  # minio:
  #   image: docker.io/minio/minio:RELEASE.2025-07-23T15-54-02Z
  #   command: "server /data --console-address ':9001'"
  #   environment:
  #     MINIO_BROWSER_REDIRECT_URL: "https://${MINIO_CONSOLE_DOMAIN}"
  #     MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
  #     MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
  #   volumes:
  #     - type: bind
  #       source: /var/stor/minio/data
  #       target: /data
  #   networks:
  #     - internal
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.minio.rule=Host(`${MINIO_S3_DOMAIN}`)"
  #     - "traefik.http.routers.minio.middlewares=crowdsec@docker"
  #     - "traefik.http.routers.minio.entrypoints=websecure"
  #     - "traefik.http.routers.minio.tls=true"
  #     - "traefik.http.routers.minio.tls.certresolver=letsencrypt"
  #     - "traefik.http.routers.minio.service=minio"
  #     - "traefik.http.services.minio.loadbalancer.server.port=9000"
  #     - "traefik.http.routers.minio-console.rule=Host(`${MINIO_CONSOLE_DOMAIN}`)"
  #     - "traefik.http.routers.minio-console.middlewares=crowdsec@docker"
  #     - "traefik.http.routers.minio-console.entrypoints=websecure"
  #     - "traefik.http.routers.minio-console.tls=true"
  #     - "traefik.http.routers.minio-console.tls.certresolver=letsencrypt"
  #     - "traefik.http.routers.minio-console.service=minio-console"
  #     - "traefik.http.services.minio-console.loadbalancer.server.port=9001"
  #     - "traefik.http.middlewares.crowdsec.plugin.bouncer.enabled=true"
  #     - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecmode=stream"
  #     - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdseclapikey=${BOUNCER_KEY_TRAEFIK}"
  #     - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecappsecenabled=true"
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
  #     interval: 30s
  #     retries: 3
  #     start_period: 10s
  #     timeout: 10s

  # beszel github

networks:
  internal:

volumes:
  crowdsec-db-vol:
  crowdsec-conf-vol:
  traefik-logs-vol:
  traefik-acme-vol:
  wg-conf-vol:
  vaultwarden-postgres-vol:
  sftpgo-postgres-vol:
  jitsi-web-conf-vol:
  jitsi-web-crontab-vol:
  jitsi-web-transcripts-vol:
  jitsi-web-load-vol:
  jitsi-prosody-conf-vol:
  jitsi-prosody-plugins-vol:
  jitsi-jicofo-conf-vol:
  jitsi-jvb-conf-vol:
